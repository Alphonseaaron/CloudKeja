// import 'dart:convert'; // Not used directly
// import 'dart:io'; // Not used directly unless _imageFile is reinstated
import 'package:flutter/material.dart';
// import 'package:flutter/services.dart'; // Not used directly
import 'package:get/route_manager.dart';
import 'package:provider/provider.dart';
// import 'package:cloudkeja/helpers/constants.dart'; // Old constants, use theme
import 'package:cloudkeja/providers/auth_provider.dart';
import 'package:cloudkeja/models/user_model.dart';
import 'package:cloudkeja/screens/auth/widgets/custom_checkbox.dart';
import 'package:cloudkeja/screens/auth/widgets/primary_button.dart';
import 'package:cloudkeja/screens/home/my_nav.dart'; // For navigation after success
import 'package:image_picker/image_picker.dart';
import 'package:firebase_storage/firebase_storage.dart' as firebase_storage;
// import 'theme.dart'; // Old theme file

class RegisterPage extends StatefulWidget {
  const RegisterPage({Key? key}) : super(key: key);

  @override
  _RegisterPageState createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  bool _passwordVisible = false;
  bool _passwordConfirmationVisible = false;
  bool _termsAccepted = false; // State for the terms checkbox

  String? _name, _idnumber, _email, _password, _phone, _passwordConfirmation;
  String? _selectedRole;
  List<XFile>? _certificationFiles;
  String? _servicesOfferedText;
  String? _serviceAreasText;

  bool _isLoading = false;
  final _formKey = GlobalKey<FormState>();

  void _togglePasswordVisibility() {
    setState(() {
      _passwordVisible = !_passwordVisible;
    });
  }

  void _togglePasswordConfirmationVisibility() {
    setState(() {
      _passwordConfirmationVisible = !_passwordConfirmationVisible;
    });
  }

  Future<void> _pickCertifications() async {
    final ImagePicker picker = ImagePicker();
    final List<XFile>? pickedFiles = await picker.pickMultiImage(imageQuality: 80); // Added imageQuality
    if (pickedFiles != null && pickedFiles.isNotEmpty) {
      setState(() {
        _certificationFiles = pickedFiles;
      });
    }
  }

  Future<void> _handleRegister() async {
    if (!_formKey.currentState!.validate()) return;
    if (!_termsAccepted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Please accept the Terms & Conditions.', style: TextStyle(color: Theme.of(context).colorScheme.onError)),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    // Default profile picture URL
    const String defaultProfilePic = 'https://firebasestorage.googleapis.com/v0/b/cloudkeja-d7e6b.appspot.com/o/userData%2FprofilePics%2Favatar.png?alt=media&token=d41075f9-6611-40f3-9c46-80730625530e';

    final user = UserModel(
      // userId will be generated by Firebase Auth
      name: _name,
      idnumber: _idnumber,
      email: _email,
      password: _password, // Password will be handled by AuthProvider, not stored directly in Firestore like this
      phone: _phone,
      profile: defaultProfilePic,
      isLandlord: _selectedRole == 'Landlord',
      isAdmin: false, // Default
      role: _selectedRole,
      rentedPlaces: [],
      wishlist: [],
      balance: 0.0,
      isVerified: false, // Default for new users
    );

    if (_selectedRole == 'ServiceProvider') {
      if ((_certificationFiles == null || _certificationFiles!.isEmpty)) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please upload at least one certification for Service Provider.', style: TextStyle(color: Theme.of(context).colorScheme.onError)), backgroundColor: Theme.of(context).colorScheme.error,));
         setState(() => _isLoading = false);
         return;
      }
      if (_servicesOfferedText == null || _servicesOfferedText!.isEmpty) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please enter services offered.', style: TextStyle(color: Theme.of(context).colorScheme.onError)), backgroundColor: Theme.of(context).colorScheme.error,));
         setState(() => _isLoading = false);
         return;
      }
      if (_serviceAreasText == null || _serviceAreasText!.isEmpty) {
         ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Please enter service areas.', style: TextStyle(color: Theme.of(context).colorScheme.onError)), backgroundColor: Theme.of(context).colorScheme.error,));
         setState(() => _isLoading = false);
         return;
      }
      
      List<String> certificationUrls = [];
      try {
        // Temporary user ID for storage path before actual user creation, or use a generic path
        String tempUserIdForPath = DateTime.now().millisecondsSinceEpoch.toString(); 
        for (XFile file in _certificationFiles!) {
          String fileName = '${DateTime.now().millisecondsSinceEpoch}_${file.name}';
          firebase_storage.Reference ref = firebase_storage.FirebaseStorage.instance
              .ref()
              .child('users_certs/${_email ?? tempUserIdForPath}/$fileName'); // Use email or temp ID for uniqueness
          UploadTask uploadTask = ref.putData(await file.readAsBytes(), SettableMetadata(contentType: 'image/jpeg')); // Assuming images
          TaskSnapshot snapshot = await uploadTask;
          String downloadUrl = await snapshot.ref.getDownloadURL();
          certificationUrls.add(downloadUrl);
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error uploading certifications: $e', style: TextStyle(color: Theme.of(context).colorScheme.onError)), backgroundColor: Theme.of(context).colorScheme.error,));
        setState(() => _isLoading = false);
        return;
      }
      user.certifications = certificationUrls;
      user.servicesOffered = _servicesOfferedText?.split(',').map((e) => e.trim()).where((s) => s.isNotEmpty).toList() ?? [];
      user.serviceAreas = _serviceAreasText?.split(',').map((e) => e.trim()).where((s) => s.isNotEmpty).toList() ?? [];
      user.availabilitySchedule = {'monday': '9am-5pm', 'tuesday': '9am-5pm', 'wednesday': '9am-5pm', 'thursday': '9am-5pm', 'friday': '9am-5pm'}; // Default
    }

    try {
      await Provider.of<AuthProvider>(context, listen: false).signUp(user);
      Get.offAll(() => const MainPage()); // Use offAll to clear auth stack
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(error.toString(), style: TextStyle(color: Theme.of(context).colorScheme.onError)),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
    } finally {
       if (mounted) { // Check if widget is still in tree
        setState(() => _isLoading = false);
      }
    }
  }


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;
    final colorScheme = theme.colorScheme;

    // Common InputDecoration for TextFormFields can be defined here if needed,
    // but global theme should handle most of it.

    return Scaffold(
      backgroundColor: colorScheme.background,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: Form(
            key: _formKey,
            child: ListView(
              children: [
                const SizedBox(height: 40),
                // Page Title Section
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Register new\naccount',
                      style: textTheme.headlineMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: colorScheme.onBackground,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Image.asset(
                      'assets/images/accent.png', // Consider theming or replacing
                      width: 99,
                      height: 4,
                      // color: colorScheme.primary, // If it's an SVG or tintable
                    ),
                  ],
                ),
                const SizedBox(height: 32),

                // Form Fields
                TextFormField(
                  onChanged: (val) => _name = val,
                  validator: (val) => (val == null || val.isEmpty) ? 'Please enter your full names' : null,
                  decoration: const InputDecoration(hintText: 'Full Names', prefixIcon: Icon(Icons.person_outline)),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  onChanged: (val) => _idnumber = val,
                  validator: (val) {
                    if (val == null || val.isEmpty) return 'Please enter your ID number';
                    if (val.length < 7 || val.length > 8) return 'Enter a valid ID number';
                    return null;
                  },
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(hintText: 'ID Number', prefixIcon: Icon(Icons.badge_outlined)),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  onChanged: (val) => _phone = val,
                  validator: (val) {
                    if (val == null || val.isEmpty) return 'Please enter your phone number';
                    if (val.length < 10) return 'Enter a valid phone number';
                    return null;
                  },
                  keyboardType: TextInputType.phone,
                  decoration: const InputDecoration(hintText: 'Phone Number', prefixIcon: Icon(Icons.phone_outlined)),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  onChanged: (val) => _email = val,
                  validator: (val) {
                    if (val == null || val.isEmpty) return 'Please enter your email';
                    if (!val.contains('@') || !val.contains('.')) return 'Enter a valid email';
                    return null;
                  },
                  keyboardType: TextInputType.emailAddress,
                  decoration: const InputDecoration(hintText: 'Email Address', prefixIcon: Icon(Icons.email_outlined)),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  onChanged: (val) => _password = val,
                  obscureText: !_passwordVisible,
                  validator: (val) {
                    if (val == null || val.isEmpty) return 'Please enter a password';
                    if (val.length < 6) return 'Password must be at least 6 characters';
                    return null;
                  },
                  decoration: InputDecoration(
                    hintText: 'Password',
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      icon: Icon(_passwordVisible ? Icons.visibility_outlined : Icons.visibility_off_outlined, color: colorScheme.onSurface.withOpacity(0.6)),
                      onPressed: _togglePasswordVisibility,
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                TextFormField(
                  onChanged: (val) => _passwordConfirmation = val,
                  obscureText: !_passwordConfirmationVisible,
                  validator: (val) {
                    if (val == null || val.isEmpty) return 'Please confirm your password';
                    if (val != _password) return 'Passwords do not match';
                    return null;
                  },
                  decoration: InputDecoration(
                    hintText: 'Confirm Password',
                    prefixIcon: const Icon(Icons.lock_outline),
                    suffixIcon: IconButton(
                      icon: Icon(_passwordConfirmationVisible ? Icons.visibility_outlined : Icons.visibility_off_outlined, color: colorScheme.onSurface.withOpacity(0.6)),
                      onPressed: _togglePasswordConfirmationVisibility,
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  value: _selectedRole,
                  onChanged: (value) => setState(() {
                    _selectedRole = value;
                    _certificationFiles = null;
                    _servicesOfferedText = null;
                    _serviceAreasText = null;
                  }),
                  items: ['Tenant', 'Landlord', 'ServiceProvider']
                      .map((role) => DropdownMenuItem(value: role, child: Text(role)))
                      .toList(),
                  decoration: const InputDecoration(hintText: 'Select Role', prefixIcon: Icon(Icons.person_pin_circle_outlined)),
                  validator: (value) => (value == null || value.isEmpty) ? 'Please select a role' : null,
                ),
                const SizedBox(height: 16),

                // Conditional Fields for Service Provider
                if (_selectedRole == 'ServiceProvider') ...[
                  TextFormField(
                    onChanged: (val) => _servicesOfferedText = val,
                    validator: (val) => (_selectedRole == 'ServiceProvider' && (val == null || val.isEmpty)) ? 'Enter services offered' : null,
                    decoration: const InputDecoration(hintText: 'Services Offered (e.g., Plumbing, Electrical)', prefixIcon: Icon(Icons.construction_outlined)),
                  ),
                  const SizedBox(height: 16),
                  TextFormField(
                    onChanged: (val) => _serviceAreasText = val,
                    validator: (val) => (_selectedRole == 'ServiceProvider' && (val == null || val.isEmpty)) ? 'Enter service areas' : null,
                    decoration: const InputDecoration(hintText: 'Service Areas (e.g., Downtown, Suburbs)', prefixIcon: Icon(Icons.map_outlined)),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.upload_file_outlined),
                    label: Text(_certificationFiles == null || _certificationFiles!.isEmpty
                        ? 'Upload Certifications'
                        : '${_certificationFiles!.length} file(s) selected'),
                    onPressed: _pickCertifications,
                    // Button style will come from ElevatedButtonThemeData
                  ),
                  if (_certificationFiles != null && _certificationFiles!.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 12.0),
                      child: Wrap(
                        spacing: 8.0,
                        runSpacing: 6.0,
                        children: _certificationFiles!
                            .map((file) => Chip(
                                  label: Text(file.name, style: textTheme.bodySmall),
                                  // Chip styling from ChipThemeData
                                  onDeleted: () { // Allow removing a selected file
                                    setState(() {
                                      _certificationFiles!.remove(file);
                                      if (_certificationFiles!.isEmpty) _certificationFiles = null;
                                    });
                                  },
                                  deleteIcon: const Icon(Icons.cancel, size: 18),
                                ))
                            .toList(),
                      ),
                    ),
                  const SizedBox(height: 16),
                ],

                // Terms & Conditions
                Row(
                  children: [
                    CustomCheckbox( // Uses themed Checkbox internally
                      onChanged: (value) => setState(() => _termsAccepted = value),
                    ),
                    const SizedBox(width: 8),
                    Expanded( // Allow text to wrap
                      child: RichText(
                        text: TextSpan(
                          text: 'By creating an account, you agree to our ',
                          style: textTheme.bodyMedium?.copyWith(color: colorScheme.onBackground.withOpacity(0.8)),
                          children: [
                            TextSpan(
                              text: 'Terms & Conditions',
                              style: textTheme.bodyMedium?.copyWith(color: colorScheme.primary, fontWeight: FontWeight.w600),
                              // TODO: Add onTap to open terms and conditions
                              // recognizer: TapGestureRecognizer()..onTap = () { print('Terms tapped'); },
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 24),

                // Register Button
                _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : CustomPrimaryButton(
                      textValue: 'Register',
                      onTap: _handleRegister,
                    ),
                const SizedBox(height: 24),

                // Login Link
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      "Already have an account? ",
                      style: textTheme.bodyMedium?.copyWith(color: colorScheme.onBackground.withOpacity(0.8)),
                    ),
                    GestureDetector(
                      onTap: () => Get.back(), // Use Get.back() if coming from login page
                      child: Text(
                        'Login',
                        style: textTheme.bodyMedium?.copyWith(
                          color: colorScheme.primary,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 40), // Bottom spacing
              ],
            ),
          ),
        ),
      ),
    );
  }
}
